var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = ConcurrencyGraph","category":"page"},{"location":"#ConcurrencyGraph","page":"Home","title":"ConcurrencyGraph","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ConcurrencyGraph.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [ConcurrencyGraph]","category":"page"},{"location":"#ConcurrencyGraph.Channel","page":"Home","title":"ConcurrencyGraph.Channel","text":"Directed communication link from src to dst. send and recv are to be interpreted from the perspective of src.\n\n\n\n\n\n","category":"type"},{"location":"#ConcurrencyGraph.Command","page":"Home","title":"ConcurrencyGraph.Command","text":"Execute ret = f() on a dst thread, optionally executing continuation(ret) from the source thread.\n\nFirst, the command is registered on a source thread with a corresponding UUID. Then, it is sent to the dst thread for execution, which will send back the value associated with this UUID. When the source thread next collects new messages, it will run continuation with the returned value.\n\n\n\n\n\n","category":"type"},{"location":"#ConcurrencyGraph.receive-Tuple{Thread, Thread}","page":"Home","title":"ConcurrencyGraph.receive","text":"Receive a message on src from dst.\n\n\n\n\n\n","category":"method"},{"location":"#ConcurrencyGraph.receive-Tuple{Thread}","page":"Home","title":"ConcurrencyGraph.receive","text":"Receive a message on the current thread from th.\n\n\n\n\n\n","category":"method"},{"location":"#ConcurrencyGraph.send-Tuple{Thread, Any}","page":"Home","title":"ConcurrencyGraph.send","text":"Send a message v from the current thread to th.\n\n\n\n\n\n","category":"method"},{"location":"#ConcurrencyGraph.send-Tuple{Thread, Thread, Any}","page":"Home","title":"ConcurrencyGraph.send","text":"Send a message v from src to dst.\n\n\n\n\n\n","category":"method"}]
}
