var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = ConcurrencyGraph","category":"page"},{"location":"#ConcurrencyGraph","page":"Home","title":"ConcurrencyGraph","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ConcurrencyGraph.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [ConcurrencyGraph]","category":"page"},{"location":"#ConcurrencyGraph.ALIVE","page":"Home","title":"ConcurrencyGraph.ALIVE","text":"Communication is theoretically possible with the task.\n\n\n\n\n\n","category":"constant"},{"location":"#ConcurrencyGraph.DEAD","page":"Home","title":"ConcurrencyGraph.DEAD","text":"The task is no longer running; either it has signalled its death or it is marked as done.\n\n\n\n\n\n","category":"constant"},{"location":"#ConcurrencyGraph.ESTABLISHED","page":"Home","title":"ConcurrencyGraph.ESTABLISHED","text":"The connection has been established and is nominal.\n\n\n\n\n\n","category":"constant"},{"location":"#ConcurrencyGraph.INITIALIZATION","page":"Home","title":"ConcurrencyGraph.INITIALIZATION","text":"The connection has been initialized.\n\n\n\n\n\n","category":"constant"},{"location":"#ConcurrencyGraph.LOST","page":"Home","title":"ConcurrencyGraph.LOST","text":"The connection was established then lost, due to a failure from either end.\n\n\n\n\n\n","category":"constant"},{"location":"#ConcurrencyGraph.UNRESPONSIVE","page":"Home","title":"ConcurrencyGraph.UNRESPONSIVE","text":"The task has timed out once or more on recent requests and has not shown activity since then.\n\n\n\n\n\n","category":"constant"},{"location":"#ConcurrencyGraph.Command","page":"Home","title":"ConcurrencyGraph.Command","text":"Execute ret = f() on a task, optionally executing continuation(ret) from the task the message has been sent from.\n\nFirst, the command is registered on a source task with a corresponding UUID. Then, as part of a message, it is sent to the destination task for execution, which will send back the value associated with this UUID if any continuation has been provided. If so, when the source task next collects new messages, it will run continuation with the returned value.\n\n\n\n\n\n","category":"type"},{"location":"#ConcurrencyGraph.Connection","page":"Home","title":"ConcurrencyGraph.Connection","text":"Connection established with a peer, from a task-local perspective.\n\n\n\n\n\n","category":"type"},{"location":"#ConcurrencyGraph.Discard","page":"Home","title":"ConcurrencyGraph.Discard","text":"Placeholder for a Future UUID to prevent any value from being stored for this Future.\n\n\n\n\n\n","category":"type"},{"location":"#ConcurrencyGraph.StatusCode","page":"Home","title":"ConcurrencyGraph.StatusCode","text":"Status code used for communicating success, failures and possibly other intermediate return modes.\n\n\n\n\n\n","category":"type"},{"location":"#ConcurrencyGraph.TaskGroup","page":"Home","title":"ConcurrencyGraph.TaskGroup","text":"List of tasks to be shutdown via a finalizer once the lifetime of TaskGroup expires.\n\n\n\n\n\n","category":"type"},{"location":"#ConcurrencyGraph.TaskState","page":"Home","title":"ConcurrencyGraph.TaskState","text":"Task state hinting at whether it should or may not answer to future requests.\n\n\n\n\n\n","category":"type"},{"location":"#ConcurrencyGraph.remove_child-Tuple{Task}","page":"Home","title":"ConcurrencyGraph.remove_child","text":"Request a parent task to remove the current task as child.\n\n\n\n\n\n","category":"method"},{"location":"#ConcurrencyGraph.shutdown-Tuple{Task}","page":"Home","title":"ConcurrencyGraph.shutdown","text":"Shut down a task by cancelling it if it has not completed.\n\nSee cancel.\n\n\n\n\n\n","category":"method"},{"location":"#ConcurrencyGraph.shutdown_children-Tuple{}","page":"Home","title":"ConcurrencyGraph.shutdown_children","text":"Shutdown all children of the current task. Returns a Condition which can be waited on.\n\n\n\n\n\n","category":"method"},{"location":"#ConcurrencyGraph.trysend-Tuple{Task, Message}","page":"Home","title":"ConcurrencyGraph.trysend","text":"Send a message m to task.\n\n\n\n\n\n","category":"method"},{"location":"#ConcurrencyGraph.@check-Tuple{Any}","page":"Home","title":"ConcurrencyGraph.@check","text":"@check f(args...)\n\nAssign the expression to a variable named _return_code. Then, if the value is not a success code, return a ConcurrencyError holding the return code.\n\n\n\n\n\n","category":"macro"}]
}
